{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","Component","constructor","super","this","state","hasError","componentDidCatch","error","info","setState","render","App","onSearchChange","event","target","value","componentDidMount","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"8KAceA,MAZF,EAAGC,OAAMC,QAAOC,QAE5B,sBAAKC,UAAU,sDAAf,UACG,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACC,6BAAKF,IACL,4BAAIC,UCcMK,MAnBE,EAAGC,YAEnB,8BAEAA,EAAOC,KAAI,CAACC,EAAMC,IAEhB,cAAC,EAAD,CAECR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,OCKMC,MAbG,EAAGC,cAAaC,kBAEhC,qBAAKV,UAAU,MAAf,SACC,uBACAA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCGEI,MAVCC,GAEb,qBAAKC,MAAO,CAAEC,UAAW,SACrBC,OAAQ,kBACRC,OAAQ,SAFZ,SAGEJ,EAAMK,WCLX,MAAMC,UAAqBC,YAC1BC,YAAYR,GACXS,MAAMT,GACNU,KAAKC,MAAQ,CACZC,UAAU,GAIZC,kBAAkBC,EAAOC,GACxBL,KAAKM,SAAS,CAAEJ,UAAU,IAG3BK,SACC,OAAGP,KAAKC,MAAMC,SACN,2DAEDF,KAAKV,MAAMK,UAILC,Q,MCdf,MAAMY,UAAYX,YACjBC,cACCC,QADa,KAadU,eAAkBC,IACjBV,KAAKM,SAAS,CAAEtB,YAAa0B,EAAMC,OAAOC,SAZ1CZ,KAAKC,MAAQ,CACZtB,OAAQ,GACRK,YAAa,IAGf6B,oBACCC,MAAM,8CACFC,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,GAASlB,KAAKM,SAAS,CAAE3B,OAAQuC,MAO3CX,SAAU,MAAD,EACwBP,KAAKC,MAA7BtB,EADA,EACAA,OAAQK,EADR,EACQA,YACVmC,EAAiBxC,EAAOyC,QAAOC,GAC7BA,EAAMjD,KAAKkD,cAAcC,SAC/BvC,EAAYsC,iBAGd,OAAQ3C,EAAO6C,OAGd,sBAAKjD,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,yBACC,cAAC,EAAD,CAAWU,aAAce,KAAKS,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACK,cAAC,EAAD,CAAU9B,OAAQwC,WAP3B,oBAAI5C,UAAU,KAAd,yBAeYiC,QCrCAiB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,EAAGa,SAAQC,SAAQC,SAAQC,SAAQC,cAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAAS1B,OACJ,cAAC,EAAD,IAAS2B,SAASC,eAAe,SAOtCV,K","file":"static/js/main.3b6c5f87.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\treturn(\n\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t   <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t  <div>\n\t\t \t\t<h2>{name}</h2>\n\t\t \t\t<p>{email}</p>\n\t\t  </div>\n\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ( {robots} ) => {\n\treturn (\n\t<div>\n\t{\n\trobots.map((user, i) => {\n\t\treturn (\n\t\t\t<Card \n\t\t\t\tkey={i}\n\t\t\t\tid={robots[i].id} \n\t\t\t\tname={robots[i].name} \n\t\t\t\temail={robots[i].email} \n\t\t\t/>\n\t      );\n\t   })\n\t }\n  \t</div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) =>{\n\treturn(\n\t <div className='pa2'>\n\t\t <input \n\t\t className='pa3 ba b--green bg-lightest-blue'\n\t\t type='search' \n\t\t placeholder='Search Robots' \n\t\t onChange={searchChange}\n\t\t />\n\t </div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t  <div style={{ overflowY: 'scroll', \n\t  \t\t\t\tborder: '5px solid black', \n\t  \t\t\t\theight: '800px'}}>\n\t  \t{props.children}\n\t  </div>\n\t)\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true })\n\t}\n\n\trender(){\n\t\tif(this.state.hasError) {\n\t\t\treturn <h1> Ooops. This is not good.</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t   .then(response => response.json())\n\t\t   .then(users => this.setState({ robots: users }));\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value })\n\t\n\t}\n\trender() {\n\t\tconst { robots, searchfield } = this.state;\n\t\tconst filteredRobots = robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(\n\t\t\t\tsearchfield.toLowerCase());\n\t\t})\n\n\t\treturn !robots.length ?\n\t\t\t<h1 className='tc'>Loading...</h1> :\n\t\t\t(\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t  <ErrorBoundry>\n\t\t\t\t        <CardList robots={filteredRobots}/>\n\t\t\t\t\t  </ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t</div>\n\t     );\n   }\t\t\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n    \t<App /> ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, \n//pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}